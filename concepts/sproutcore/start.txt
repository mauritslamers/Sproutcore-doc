====== Concepts used inside the SproutCore framework ======

===== SproutCores Object Oriented System =====

Javascript is an Object Oriented language, but doesn't follow the class and instance pattern used in many other object oriented languages and environments. SproutCore wraps the Javascript system to build a class and instance pattern. [[concepts:sproutcore:objectoriented | More...]]

===== MVC: Model-View-Controller =====

SproutCore is an implementation of the Model-View-Controller development paradigm. In implementing this paradigm, the framework follows the implementation model as used in Cocoa/NeXTStep. Two concepts are of major importance in this model: the inheritance model and the observer/binding pattern.

==== Inheritance model ====

Cocoa is an Object Oriented MVC implementation, in which all objects inherit from a single base object. This base object defines standard behaviour and properties that should be shared by every object in the framework. SproutCore shares this implementation model. [[inheritance| More... ]]

==== Roles of Model, View and Controller ====

In Cocoa the roles of Models, Views and Controllers can deviate from what you are expecting, in the sense that the divisions are quite strict. [[mvcroles| More... ]]

===== Observer/binding pattern =====

==== Bindings ==== 

To prevent having to write code to update every value in every controller and view, SC provides a binding: a link you define which binds the value from a property on a controller or view to a local property. [[bindings| More ...]]

==== Computed Properties ====

Sometimes properties are dependent on other properties. To prevent having to recompute this information every time, SC provides a computed property system. [[computedproperty | More...]]

==== Observers ====

Observers are a special type of functions. These functions are executed whenever a property they observe changes value. Observers are intended to be used within objects. [[observers| More... ]]

==== Getters and Setters ====

In order to make bindings and observers work inside JavaScript, SproutCore uses get and set functions. [[getterssetters| More...]] 

===== Mixins =====

In Object Oriented systems multiple inheritance is desired, but often difficult because of the propagation of changes through all classes. To prevent having to deal with these multiple origin changes, the Mixin concept is used. [[mixins| More ...]] 

===== RunLoop =====

The RunLoop is a concept to prevent your application having to run constantly, which is not useful in a event based environment. [[runloop| More ...]]